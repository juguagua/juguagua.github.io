<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on juguaguaji</title>
    <link>https://juguagua.github.io/post/</link>
    <description>Recent content in Posts on juguaguaji</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://juguagua.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://juguagua.github.io/post/ssh%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juguagua.github.io/post/ssh%E8%BF%9E%E6%8E%A5/</guid>
      <description>SHH（Secure Shell）用于加密两台计算机的通信，支持各种身份验证机制，主要用于保证远程登陆和远程通信的安全。SSH 的软件架构是CS模式，其有多种实现，主要用的是开源的OpenSSH 一般用 大写的 SSH 表示协议，小写的 ssh 表示客户端软件
登录服务器 $ ssh user@hostname user是登录服务器的用户名，hostname是主机名（域名或者IP地址） ssh 默认连接服务器的 22 端口，可以通过 -p参数进行端口指定
连接流程   ssh 连接服务器后，首先验证服务器是否为陌生地址，如果是第一次连接，会出现提醒是否确认连接
这里是否陌生是通过服务器 SSH公钥 的哈希值来判断的，每台 SSH服务器 都有一对密钥，ssh 会将本机连接过的服务器的公钥哈希值都存储在本机的.ssh/known_hosts文件中，每次连接通过该文件判断是否为模式主机
  确认连接后，ssh 会要求输入密码，之后就可以登录到目标服务器了
  ssh客户端配置 用户的个人配置文件在~/.ssh/config 可以按照不同的服务器，列出各自的连接参数，以后就不需要每次登录都输入了，如：
Host remote  HostName xxxx.yyyy.com  User us  Port 2222 remote 可以作为一个别名来代替原有的HostName，以后再登录该服务器，就可以:
ssh remote 等同于 ssh -p 2222 us@xxxx.yyyy.com 密钥登录 SSH默认使用密码登录，每次输密码较麻烦且不安全，所以在常用的工作机上可以设置密钥登录 密钥通过加密算法得到，一般是一长串数字，SSH采用非对称加密，和https的SSL加密过程有些类似
密钥登录过程  客户端通过ssh-keygen命令生成自己的公钥和私钥，并将公钥上传到远程服务器 客户端向服务器发起SSH登录请求，服务器收到后发送一些随机数据给客户端 客户端使用私钥对数据进行签名，发回给服务器 服务器收到加密签名后使用对应的公钥解密判断是否一致  密钥生成和上传  生成密钥  OpenSSH提供了工具 ssh-keygen命令用来生成密钥，采用默认的rsa算法生成的密钥文件默认是~/.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://juguagua.github.io/post/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://juguagua.github.io/post/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6/</guid>
      <description>构成Mysql数据库和InnoDB存储引擎表的各种类型文件，主要有：参数文件，日志文件，MySQL表结构文件，存储引擎文件。
参数文件 参数文件指的就是MySQL数据库的配置文件，用来定义数据库的各种文件所在位置以及指定某些初始化参数等。参数文件是直接以文本方式进行存储的 参数类型 有 动态参数和静态参数两种。动态参数意味着可以在数据库运行中更改，而静态参数就在整个实例的生命周期内都不能进行更改。
日志文件 日志文件记录了影响MySQL数据库的各种类型活动。
错误日志 错误日志对数据库的启动，运行，关闭过程都进行了记录。在数据库遇到问题时应首先查看错误日志来定位问题。可以通过SHOW VARIABLES LIKE &#39;log_error&#39;来定位该文件
慢查询日志 慢查询日志可以帮助定位存在问题的 SQL 语句，从而进行 SQL 语句层面的优化。例如可以在 MySQL 启动时设置一个阈值，将运行时间超过该值的所有 SQL 语句都记录到慢查询日志文件中，该阈值可以通过参数 long_query_time来设置。 可以将慢查询的日志记录放入一张表中，使得排查更加方便和直观，慢查询表名为slow_log。 除了查询出执行时间慢的 SQL，也可以针对SQL语句执行的 IO 次数进行查询，可以通过long_query_io参数将超过指定逻辑 IO 次数的 SQL 语句记录到 slow log中。
二进制日志（bin log） 二进制日志记录了对数据库执行更改的所有操作。其主要有以下几种作用：
 恢复：某些数据的恢复需要二进制日志。 复制：主要用于主从数据库的同步 审计：可以通过二进制日志中的信息审计判断是否有对数据库进行注入的攻击  二进制日志并不是在每次写的时候都会同步到磁盘（缓冲写），因此当数据库宕机时，可能有一部分数据没有写入到二进制日志文件中，这会给恢复和复制带来一些问题。 如果当前数据库是主从复制中的 从 角色，则同步时需要设置log-slave-update参数。
二进制日志的格式可以由binlog_format参数进行设置，其为动态参数可随时更改：
 STATEMENT：记录的是日志的逻辑 SQL 语句 ROW：记录的是表的行更改情况 MIXED：默认采用STATEMENT格式进行二进制日志的记录，在一些情况下会使用 ROW 格式  因为二进制日志的文件格式是二进制，所以要查看的话需要通过mysqlbinlog工具进行。
InnoDB存储引擎文件 表空间文件 InnoDB采用将存储的数据按表空间进行存放的设计。默认配置下有初始大小为10MB，名为ibdata1的表空间文件，其大小可以自动增长。可以将多个文件共同组成表空间文件，如果这些文件位于不同的磁盘上，磁盘的负载就能被平均以此提高数据库的整体性能。
重做日志文件（redo log） 默认情况下 InnoDB 引擎有两个名为 ib_logfile0和 ib_logfile1的文件，这就是默认的重做日志，其记录了对于 InnoDB 引擎的事务日志，当数据库宕机时，就使用重做日志恢复到宕机前的状态来保证数据的完整性。 每个存储引擎下都至少有一个重做日志文件组，每个文件组下至少有两个重做日志文件。可以设置多个镜像日志组，将不同的文件组放在不同的磁盘上来提高可靠性。重做日志文件的大小都一致，以循环写的方式运行。 重做日志文件的大小设置对于存储引擎的性能影响很大，如果设置过大，则恢复时需要很长时间，如果设置过小，则会导致频繁地async checkpoint，导致性能抖动。 重做日志也不是直接写的，而是先写入一个重做日志缓冲，之后按照一定的条件顺序写入日志文件中。</description>
    </item>
    
  </channel>
</rss>
