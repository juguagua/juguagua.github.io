[{"authors":[{"title":"RazonYang","url":"/authors/razonyang/"}],"categories":[{"title":"Image","url":"/categories/image/"}],"content":"See also Image Processing.\n","date":"July 8, 2022","img":"/news/2022/07/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80/featured-sample.webp","lang":"en","langName":"English","largeImg":"/news/2022/07/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80/featured-sample_huc6bcc14d597e300fd9ab4aae536c68a5_498412_500x0_resize_q75_h2_box_2.webp","permalink":"/news/2022/07/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80/","series":[{"title":"News","url":"/series/news/"}],"smallImg":"/news/2022/07/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80/featured-sample_huc6bcc14d597e300fd9ab4aae536c68a5_498412_180x0_resize_q75_h2_box_2.webp","tags":[{"title":"Crop","url":"/tags/crop/"},{"title":"Fit","url":"/tags/fit/"},{"title":"Fill","url":"/tags/fill/"},{"title":"Filters","url":"/tags/filters/"}],"timestamp":1657251287,"title":"面朝大海，春暖花开"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"zh-cn","langName":"简体中文","largeImg":"","permalink":"/zh-cn/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"},{"authors":[],"categories":[],"content":"SHH（Secure Shell）用于加密两台计算机的通信，支持各种身份验证机制，主要用于保证远程登陆和远程通信的安全。SSH 的软件架构是CS模式，其有多种实现，主要用的是开源的OpenSSH 一般用 大写的 SSH 表示协议，小写的 ssh 表示客户端软件\n登录服务器\r$ ssh user@hostname user是登录服务器的用户名，hostname是主机名（域名或者IP地址） ssh 默认连接服务器的 22 端口，可以通过 -p参数进行端口指定\n连接流程\rssh 连接服务器后，首先验证服务器是否为陌生地址，如果是第一次连接，会出现提醒是否确认连接\n这里是否陌生是通过服务器 SSH公钥 的哈希值来判断的，每台 SSH服务器 都有一对密钥，ssh 会将本机连接过的服务器的公钥哈希值都存储在本机的.ssh/known_hosts文件中，每次连接通过该文件判断是否为模式主机\n确认连接后，ssh 会要求输入密码，之后就可以登录到目标服务器了\nssh客户端配置\r用户的个人配置文件在~/.ssh/config 可以按照不同的服务器，列出各自的连接参数，以后就不需要每次登录都输入了，如：\nHost remote HostName xxxx.yyyy.com User us Port 2222 remote 可以作为一个别名来代替原有的HostName，以后再登录该服务器，就可以:\nssh remote 等同于 ssh -p 2222 us@xxxx.yyyy.com 密钥登录\rSSH默认使用密码登录，每次输密码较麻烦且不安全，所以在常用的工作机上可以设置密钥登录 密钥通过加密算法得到，一般是一长串数字，SSH采用非对称加密，和https的SSL加密过程有些类似\n密钥登录过程\r客户端通过ssh-keygen命令生成自己的公钥和私钥，并将公钥上传到远程服务器 客户端向服务器发起SSH登录请求，服务器收到后发送一些随机数据给客户端 客户端使用私钥对数据进行签名，发回给服务器 服务器收到加密签名后使用对应的公钥解密判断是否一致 密钥生成和上传\r生成密钥 OpenSSH提供了工具 ssh-keygen命令用来生成密钥，采用默认的rsa算法生成的密钥文件默认是~/.ssh/id_rsa（私钥）和~/.ssh/id_rsa.pub（公钥）\n上传密钥 生成密钥之后，公钥要上传到服务器才能使用公钥登录\n手动上传： OpenSSH中的用户公钥保存在服务器的`~/.ssh/authorized_keys`文件中，我们可以手动编辑这个文件，把公钥添加在这个文件的最后一行 自动上传\nOpenSSH自带`ssh-copy-id`命令，可以自动将公钥拷贝到远程服务器的公钥文件中。 在本地执行 ssh-copy-id -i key_file user@host就可以。其中-i表示指定公钥文件，即key_file。ssh-copy-id命令采用密码登录\nscp 命令\rscp是 SSH 提供的一个客户端程序，用来在两台主机之间加密复制文件 scp是 secure copy的缩写，相当于cp命令 + SSH，其底层是 SSH 协议，默认端口是 22，相当于先使用 ssh命令登录远程主机，然后再执行拷贝操作 其主要用于以下三种复制：\n本地复制到远程 远程复制到本地 两个远程系统之间的复制 基本语法\rscp语法类似于cp的语法： scp source destination 如：scp user@host: example.txt temp.txt 将远程主机主目录下的example.txt复制为本机当前目录的temp.txt，注意主机和文件之间要用冒号分隔\n","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/post/ssh%E8%BF%9E%E6%8E%A5/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"SSH连接"},{"authors":[],"categories":[],"content":"构成Mysql数据库和InnoDB存储引擎表的各种类型文件，主要有：参数文件，日志文件，MySQL表结构文件，存储引擎文件。\n参数文件\r参数文件指的就是MySQL数据库的配置文件，用来定义数据库的各种文件所在位置以及指定某些初始化参数等。参数文件是直接以文本方式进行存储的 参数类型 有 动态参数和静态参数两种。动态参数意味着可以在数据库运行中更改，而静态参数就在整个实例的生命周期内都不能进行更改。\n日志文件\r日志文件记录了影响MySQL数据库的各种类型活动。\n错误日志\r错误日志对数据库的启动，运行，关闭过程都进行了记录。在数据库遇到问题时应首先查看错误日志来定位问题。可以通过SHOW VARIABLES LIKE 'log_error'来定位该文件\n慢查询日志\r慢查询日志可以帮助定位存在问题的 SQL 语句，从而进行 SQL 语句层面的优化。例如可以在 MySQL 启动时设置一个阈值，将运行时间超过该值的所有 SQL 语句都记录到慢查询日志文件中，该阈值可以通过参数 long_query_time来设置。 可以将慢查询的日志记录放入一张表中，使得排查更加方便和直观，慢查询表名为slow_log。 除了查询出执行时间慢的 SQL，也可以针对SQL语句执行的 IO 次数进行查询，可以通过long_query_io参数将超过指定逻辑 IO 次数的 SQL 语句记录到 slow log中。\n二进制日志（bin log）\r二进制日志记录了对数据库执行更改的所有操作。其主要有以下几种作用：\n恢复：某些数据的恢复需要二进制日志。 复制：主要用于主从数据库的同步 审计：可以通过二进制日志中的信息审计判断是否有对数据库进行注入的攻击 二进制日志并不是在每次写的时候都会同步到磁盘（缓冲写），因此当数据库宕机时，可能有一部分数据没有写入到二进制日志文件中，这会给恢复和复制带来一些问题。 如果当前数据库是主从复制中的 从 角色，则同步时需要设置log-slave-update参数。\n二进制日志的格式可以由binlog_format参数进行设置，其为动态参数可随时更改：\nSTATEMENT：记录的是日志的逻辑 SQL 语句 ROW：记录的是表的行更改情况 MIXED：默认采用STATEMENT格式进行二进制日志的记录，在一些情况下会使用 ROW 格式 因为二进制日志的文件格式是二进制，所以要查看的话需要通过mysqlbinlog工具进行。\nInnoDB存储引擎文件\r表空间文件\rInnoDB采用将存储的数据按表空间进行存放的设计。默认配置下有初始大小为10MB，名为ibdata1的表空间文件，其大小可以自动增长。可以将多个文件共同组成表空间文件，如果这些文件位于不同的磁盘上，磁盘的负载就能被平均以此提高数据库的整体性能。\n重做日志文件（redo log）\r默认情况下 InnoDB 引擎有两个名为 ib_logfile0和 ib_logfile1的文件，这就是默认的重做日志，其记录了对于 InnoDB 引擎的事务日志，当数据库宕机时，就使用重做日志恢复到宕机前的状态来保证数据的完整性。 每个存储引擎下都至少有一个重做日志文件组，每个文件组下至少有两个重做日志文件。可以设置多个镜像日志组，将不同的文件组放在不同的磁盘上来提高可靠性。重做日志文件的大小都一致，以循环写的方式运行。 重做日志文件的大小设置对于存储引擎的性能影响很大，如果设置过大，则恢复时需要很长时间，如果设置过小，则会导致频繁地async checkpoint，导致性能抖动。 重做日志也不是直接写的，而是先写入一个重做日志缓冲，之后按照一定的条件顺序写入日志文件中。\n与bin log有什么区别？\rbin log 会记录所有与MySQL数据库相关的日志记录，而redo log只记录有关InnoDB 引擎本身的事务日志 bin log 记录的是一个事务的具体操作内容，即逻辑日志，而redo log记录的是每个页更改的物理情况 bin log 仅在事务提交前进行提交，即只写盘一次，不论这时事务多大；而redo log在事务进行中不断写入 ","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/post/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%96%87%E4%BB%B6/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"第三章 文件"}]
